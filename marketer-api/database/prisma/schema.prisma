generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model costumer {
  id                 Int                  @id @unique @default(autoincrement())
  name               String               @db.VarChar(45)
  email              String               @unique @db.VarChar(255)
  password_hash      String               @db.VarChar(255)
  picture_uri        String?
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  genderId           Int
  birthday           String
  cpf                String?              @unique @db.VarChar(13)
  gender             gender               @relation(fields: [genderId], references: [id])
  costumer_addresses costumer_addresses[]
  shopping_lists     shopping_list[]

  @@index([genderId], map: "costumer_genderId_fkey")
}

model deliveryman {
  id                  Int                   @id @unique @default(autoincrement())
  name                String                @db.VarChar(45)
  email               String                @unique @db.VarChar(255)
  password_hash       String                @db.VarChar(255)
  picture_uri         String                @db.VarChar(255)
  locationId          Int                   @unique
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  genderId            Int
  birthday            String
  gender              gender                @relation(fields: [genderId], references: [id])
  location            location              @relation(fields: [locationId], references: [id])
  order               order[]
  veicule_deliveryman veicule_deliveryman[]

  @@index([genderId], map: "deliveryman_genderId_fkey")
}

model veicule_deliveryman {
  id            Int         @id @unique @default(autoincrement())
  veiculeId     Int
  deliverymanId Int
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  owner         deliveryman @relation(fields: [deliverymanId], references: [id])
  veicule       veicule     @relation(fields: [veiculeId], references: [id])

  @@index([deliverymanId], map: "veicule_deliveryman_deliverymanId_fkey")
  @@index([veiculeId], map: "veicule_deliveryman_veiculeId_fkey")
}

model payment {
  id               Int            @id @unique @default(autoincrement())
  status           Boolean        @default(false)
  details          String
  payment_methodId Int
  orderId          Int            @unique
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  order            order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  payment_method   payment_method @relation(fields: [payment_methodId], references: [id])

  @@index([payment_methodId], map: "payment_payment_methodId_fkey")
}

model order {
  id                          Int                @id @unique @default(autoincrement())
  accepted_status             Boolean            @default(false)
  delivered_status_for_client Boolean            @default(false)
  retreat_products_status     Boolean            @default(false)
  deliverymanId               Int
  shopping_listId             Int                @unique
  created_at                  DateTime           @default(now())
  updated_at                  DateTime           @updatedAt
  costumer_addressesId        Int
  costumer_addresses          costumer_addresses @relation(fields: [costumer_addressesId], references: [id], onDelete: Cascade)
  deliveryman                 deliveryman        @relation(fields: [deliverymanId], references: [id], onDelete: Cascade)
  shopping_list               shopping_list      @relation(fields: [shopping_listId], references: [id], onDelete: Cascade)
  payment                     payment?

  @@index([costumer_addressesId], map: "order_costumer_addressesId_fkey")
  @@index([deliverymanId], map: "order_deliverymanId_fkey")
}

model shopping_list {
  id                        Int                         @id @unique @default(autoincrement())
  freight                   Float?
  total                     Float
  costumerId                Int
  created_at                DateTime                    @default(now())
  updated_at                DateTime                    @updatedAt
  order                     order?
  products_in_shopping_list products_in_shopping_list[]
  costumer                  costumer                    @relation(fields: [costumerId], references: [id], onDelete: Cascade)

  @@index([costumerId], map: "shopping_list_costumerId_fkey")
}

model products_in_shopping_list {
  id              Int           @id @unique @default(autoincrement())
  shopping_listId Int
  productId       Int
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  product         product       @relation(fields: [productId], references: [id])
  shopping_list   shopping_list @relation(fields: [shopping_listId], references: [id], onDelete: Cascade)

  @@index([productId], map: "products_in_shopping_list_productId_fkey")
  @@index([shopping_listId], map: "products_in_shopping_list_shopping_listId_fkey")
}

model product {
  id                        Int                         @id @unique @default(autoincrement())
  name                      String                      @db.VarChar(120)
  price                     Float
  review                    Float                       @default(0)
  active_for_selling        Boolean                     @default(true)
  available_quantity        Int
  marketerId                Int
  created_at                DateTime                    @default(now())
  updated_at                DateTime                    @updatedAt
  description               String
  category_of_productId     Int
  type_of_productId         Int
  image_of_product          image_of_product[]
  category_of_product       category_of_product         @relation(fields: [category_of_productId], references: [id])
  marketer                  marketer                    @relation(fields: [marketerId], references: [id], onDelete: Cascade)
  type_of_price_product     type_of_price               @relation(fields: [type_of_productId], references: [id])
  products_in_shopping_list products_in_shopping_list[]
  sale_off                  sale_off[]

  @@index([marketerId], map: "product_marketerId_fkey")
  @@index([category_of_productId], map: "product_category_of_productId_fkey")
  @@index([type_of_productId], map: "product_type_of_productId_fkey")
}

model marketer {
  id             Int              @id @unique @default(autoincrement())
  name           String           @db.VarChar(45)
  email          String           @unique @db.VarChar(255)
  password_hash  String           @db.VarChar(255)
  picture_uri    String?
  review         Float            @default(0)
  online         Boolean          @default(false)
  locationId     Int              @unique
  created_at     DateTime         @default(now())
  birthday       String
  updated_at     DateTime         @updatedAt
  genderId       Int
  cnpj           String?          @unique @db.VarChar(18)
  cpf            String?          @unique @db.VarChar(13)
  phone          String           @db.VarChar(15)
  fair_marketers fair_marketers[]
  gender         gender           @relation(fields: [genderId], references: [id])
  location       location         @relation(fields: [locationId], references: [id])
  products       product[]

  @@index([genderId], map: "marketer_genderId_fkey")
}

model fair {
  id                     Int                      @id @unique @default(autoincrement())
  review                 Float                    @default(0)
  addressId              Int                      @unique
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  locationId             Int
  address                address                  @relation(fields: [addressId], references: [id])
  location               location                 @relation(fields: [locationId], references: [id], onDelete: Cascade)
  fair_date_hour_of_work fair_date_hour_of_work[]
  fair_marketers         fair_marketers[]

  @@index([locationId], map: "fair_locationId_fkey")
}

model fair_marketers {
  id         Int      @id @unique @default(autoincrement())
  fairId     Int
  marketerId Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  fair       fair     @relation(fields: [fairId], references: [id], onDelete: Cascade)
  marketer   marketer @relation(fields: [marketerId], references: [id], onDelete: Cascade)

  @@unique([fairId, marketerId])
  @@index([fairId], map: "fair_marketers_fairId_fkey")
  @@index([marketerId], map: "fair_marketers_marketerId_fkey")
}

model costumer_addresses {
  id         Int      @id @unique @default(autoincrement())
  addressId  Int
  costumerId Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  address    address  @relation(fields: [addressId], references: [id], onDelete: Cascade)
  costumer   costumer @relation(fields: [costumerId], references: [id], onDelete: Cascade)
  order      order[]

  @@index([costumerId], map: "costumer_addresses_costumerId_fkey")
  @@index([addressId], map: "costumer_addresses_addressId_fkey")
}

model location {
  id          Int          @id @unique @default(autoincrement())
  longitude   Float
  latitude    Float
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  deliveryman deliveryman?
  fair        fair[]
  marketer    marketer?
}

model address {
  id                 Int                  @id @unique @default(autoincrement())
  cep                String
  number             Int
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  address_typeId     Int
  complemento        String
  cityId             Int
  uFId               Int
  neighborhoodId     Int
  type               address_type         @relation(fields: [address_typeId], references: [id])
  city               city                 @relation(fields: [cityId], references: [id])
  neighborhood       neighborhood         @relation(fields: [neighborhoodId], references: [id])
  uf                 uf                   @relation(fields: [uFId], references: [id])
  costumer_addresses costumer_addresses[]
  fair               fair?

  @@index([address_typeId], map: "address_address_typeId_fkey")
  @@index([cityId], map: "address_cityId_fkey")
  @@index([neighborhoodId], map: "address_neighborhoodId_fkey")
  @@index([uFId], map: "address_uFId_fkey")
}

model address_type {
  id         Int       @id @unique @default(autoincrement())
  name       String    @db.VarChar(90)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  address    address[]
}

model veicule {
  id                  Int                   @id @unique @default(autoincrement())
  name                String                @db.VarChar(120)
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  veicule_deliveryman veicule_deliveryman[]
}

model image_of_product {
  id         Int      @id @unique @default(autoincrement())
  imageId    Int
  productId  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  image      image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  product    product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([imageId], map: "image_of_product_imageId_fkey")
  @@index([productId], map: "image_of_product_productId_fkey")
}

model image {
  id                  Int                   @id @unique @default(autoincrement())
  uri                 String                @db.VarChar(255)
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  category_of_product category_of_product[]
  image_of_product    image_of_product[]
}

model payment_method {
  id         Int       @id @unique @default(autoincrement())
  name       String    @db.VarChar(120)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  payment    payment[]
}

model fair_date_hour_of_work {
  id                      Int                   @id @unique @default(autoincrement())
  fairId                  Int
  date_and_hour_of_workId Int
  created_at              DateTime              @default(now())
  updated_at              DateTime              @updatedAt
  dates                   date_and_hour_of_work @relation(fields: [date_and_hour_of_workId], references: [id])
  fair                    fair                  @relation(fields: [fairId], references: [id], onDelete: Cascade)

  @@index([date_and_hour_of_workId], map: "fair_date_hour_of_work_date_and_hour_of_workId_fkey")
  @@index([fairId], map: "fair_date_hour_of_work_fairId_fkey")
}

model date_and_hour_of_work {
  id                     Int                      @id @unique @default(autoincrement())
  open_datetime          DateTime
  close_datetime         DateTime
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  day_of_weekId          Int
  day_of_week            day_of_week              @relation(fields: [day_of_weekId], references: [id])
  fair_date_hour_of_work fair_date_hour_of_work[]

  @@index([day_of_weekId], map: "date_and_hour_of_work_day_of_weekId_fkey")
}

model day_of_week {
  id                    Int                     @id @unique @default(autoincrement())
  name                  String                  @unique @db.VarChar(20)
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  date_and_hour_of_work date_and_hour_of_work[]
}

model gender {
  id          Int           @id @unique @default(autoincrement())
  name        String        @db.VarChar(40)
  created_at  DateTime      @default(now())
  updated_at  DateTime
  costumer    costumer[]
  deliveryman deliveryman[]
  marketer    marketer[]
}

model city {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  address address[]
}

model neighborhood {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  address address[]
}

model uf {
  id      Int       @id @default(autoincrement())
  name    String    @unique(map: "UF_name_key")
  address address[]
}

model category_of_product {
  id      Int       @id @default(autoincrement())
  imageId Int
  name    String    @unique
  image   image     @relation(fields: [imageId], references: [id])
  product product[]

  @@index([imageId], map: "category_of_product_imageId_fkey")
}

model sale_off {
  id        Int     @id @default(autoincrement())
  value     Float
  productId Int
  product   product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "sale_off_productId_fkey")
}

model type_of_price {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  product product[]
}
